!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BITS_PARITY_EVEN	serial/serial.h	16;"	d
BITS_PARITY_NONE	serial/serial.h	14;"	d
BITS_PARITY_ODD	serial/serial.h	15;"	d
BITS_STOP_1	serial/serial.h	18;"	d
BITS_STOP_2	serial/serial.h	19;"	d
BYTE	serial/serial.h	/^typedef unsigned char  BYTE;$/;"	t
CC	Makefile	/^CC = gcc -g -o$/;"	m
CLEAR	camera/capture.c	28;"	d	file:
CLEAR	camera/v4l2grab.c	26;"	d	file:
DWORD	serial/serial.h	/^typedef unsigned int   DWORD;$/;"	t
GPRS_H	gprs/gprs.h	2;"	d
IO_METHOD_MMAP	camera/capture.c	/^	IO_METHOD_MMAP,$/;"	e	enum:io_method	file:
IO_METHOD_READ	camera/capture.c	/^	IO_METHOD_READ,$/;"	e	enum:io_method	file:
IO_METHOD_USERPTR	camera/capture.c	/^	IO_METHOD_USERPTR,$/;"	e	enum:io_method	file:
LIB	Makefile	/^LIB = -lsqlite3$/;"	m
LONG	serial/serial.h	/^typedef signed int     LONG;$/;"	t
RFID_H	rfid/rfid.h	2;"	d
SERIAL_H	serial/serial.h	2;"	d
SRC	Makefile	/^SRC = main.c .\/com\/mycom.c .\/init\/init.c .\/record_sql\/record.c$/;"	m
SRC	camera/Makefile	/^SRC = capture.c$/;"	m
WORD	serial/serial.h	/^typedef unsigned short WORD;$/;"	t
baudrate	serial/serial.h	/^	uint32_t baudrate;$/;"	m	struct:serial_attr
buffer	camera/capture.c	/^struct buffer {$/;"	s	file:
buffer	camera/v4l2grab.c	/^struct buffer {$/;"	s	file:
buffers	camera/capture.c	/^struct buffer          *buffers;$/;"	v	typeref:struct:buffer
card_check	rfid/rfid.c	/^static int card_check(const BYTE *card_buff)$/;"	f	file:
close_device	camera/capture.c	/^static void close_device(void)$/;"	f	file:
databits	serial/serial.h	/^	uint8_t  databits;$/;"	m	struct:serial_attr
dev_name	camera/capture.c	/^static char            *dev_name;$/;"	v	file:
errno_exit	camera/capture.c	/^static void errno_exit(const char *s)$/;"	f	file:
fd	camera/capture.c	/^static int              fd = -1;$/;"	v	file:
force_format	camera/capture.c	/^static int              force_format;$/;"	v	file:
frame_count	camera/capture.c	/^static int              frame_count = 70;$/;"	v	file:
init_device	camera/capture.c	/^static void init_device(void)$/;"	f	file:
init_mmap	camera/capture.c	/^static void init_mmap(void)$/;"	f	file:
init_read	camera/capture.c	/^static void init_read(unsigned int buffer_size)$/;"	f	file:
init_userp	camera/capture.c	/^static void init_userp(unsigned int buffer_size)$/;"	f	file:
io	camera/capture.c	/^static enum io_method   io = IO_METHOD_MMAP;$/;"	v	typeref:enum:io_method	file:
io_method	camera/capture.c	/^enum io_method {$/;"	g	file:
length	camera/capture.c	/^	size_t  length;$/;"	m	struct:buffer	file:
length	camera/v4l2grab.c	/^	size_t length;$/;"	m	struct:buffer	file:
long_options	camera/capture.c	/^long_options[] = {$/;"	v	typeref:struct:option	file:
main	camera/capture.c	/^int main(int argc, char **argv)$/;"	f
main	camera/v4l2grab.c	/^int main(int argc, char **argv)$/;"	f
mainloop	camera/capture.c	/^static void mainloop(void)$/;"	f	file:
n_buffers	camera/capture.c	/^static unsigned int     n_buffers;$/;"	v	file:
open_device	camera/capture.c	/^static void open_device(void)$/;"	f	file:
out_buf	camera/capture.c	/^static int              out_buf;$/;"	v	file:
parity	serial/serial.h	/^	uint8_t  parity;$/;"	m	struct:serial_attr
process_image	camera/capture.c	/^static void process_image(const void *p, int size)$/;"	f	file:
read_frame	camera/capture.c	/^static int read_frame(void)$/;"	f	file:
rfid_init	rfid/rfid.c	/^int rfid_init(const BYTE *DEV)$/;"	f
rfid_read	rfid/rfid.c	/^int rfid_read(int fd, BYTE *card_id)$/;"	f
serail_open	serial/serial.c	/^int serail_open(const char *DEV)$/;"	f
serial_attr	serial/serial.h	/^typedef struct serial_attr{$/;"	s
serial_attr	serial/serial.h	/^}serial_attr;$/;"	t	typeref:struct:serial_attr
serial_close	serial/serial.c	/^int serial_close(int fd)$/;"	f
serial_flushio	serial/serial.c	/^int serial_flushio(int fd)$/;"	f
serial_read	serial/serial.c	/^int serial_read(int fd, BYTE *rbuff, uint32_t nbytes)$/;"	f
serial_write	serial/serial.c	/^int serial_write(int fd, BYTE *wbuff, uint32_t nbytes)$/;"	f
set_serail_attr	serial/serial.c	/^int set_serail_attr(int fd, serail_attr *attr)$/;"	f
short_options	camera/capture.c	/^static const char short_options[] = "d:hmruofc:";$/;"	v	file:
start	camera/capture.c	/^	void   *start;$/;"	m	struct:buffer	file:
start	camera/v4l2grab.c	/^	void   *start;$/;"	m	struct:buffer	file:
start_capturing	camera/capture.c	/^static void start_capturing(void)$/;"	f	file:
stop_capturing	camera/capture.c	/^static void stop_capturing(void)$/;"	f	file:
stopbits	serial/serial.h	/^	uint8_t  stopbits;$/;"	m	struct:serial_attr
uninit_device	camera/capture.c	/^static void uninit_device(void)$/;"	f	file:
usage	camera/capture.c	/^static void usage(FILE *fp, int argc, char **argv)$/;"	f	file:
xioctl	camera/capture.c	/^static int xioctl(int fh, int request, void *arg)$/;"	f	file:
xioctl	camera/v4l2grab.c	/^static void xioctl(int fh, int request, void *arg)$/;"	f	file:
